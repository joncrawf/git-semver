#!/bin/bash

increment_value ()
{
  echo $(($1+1))
}

return_v_if_it_is_contained ()
{
  if [[ $1 == *"v"* ]]
  then
    echo "v"
  fi
}

increase_version ()
{
  local index=$2
  local current_version=$(echo $1 | awk -F"." '{print $'$index'}')

  local v=$(return_v_if_it_is_contained $current_version)
  current_version=${current_version/v}
  local next_version=$(increment_value $current_version $v)
  echo "$v$(echo $1 | awk -F"." -v OFS=. '{$'$index'='$next_version'; print }')"
}

last_tag=$(git describe --abbrev=0)

if [[ $last_tag =~ ^v{0,1}[0-9]+.[0-9]+.[0-9]+$ ]]
then
  version=$last_tag
else
  while true; do
    read -p "Version not set or not the correct format. Set it to 0.0.1 (y) or exit (n)?" yn
    case $yn in
      [Yy]* ) version="0.0.0" ; break;;
      [Nn]* ) exit;;
          * ) echo "Please answer yes or no.";;
    esac
  done
fi

echo "current version:" $version

commands=()

for i in "$@"
do
  case "$i" in
    --patch) commands+=("-a") ; version=$(increase_version $version 3) ; commands+=("$version") ;;
    --minor) commands+=("-a") ; version=$(increase_version $version 2) ; commands+=("$version") ;;
    --major) commands+=("-a") ; version=$(increase_version $version 1) ; commands+=("$version") ;;
    *) commands+=("$i") ;;
  esac
done

echo "new version:" $version
git tag "${commands[@]}"
